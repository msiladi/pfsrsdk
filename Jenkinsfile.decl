@Library('common-jenkins-declarative@2.x.x') _

pipeline {
    agent {
        node { label 'agent-debian' }
    }

    environment {
        noOp = defaultEnv()
        RELEASE_BRANCHES = /^(master|develop|release.+|hotfix.+)/
    }

    options {
        timeout(time: 2, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
    }

    stages {
        stage('packrat') {
            steps {
                gradleTask('packratRestore')
            }
        }
        
        stage('build-package') {
            steps {
                gradleTask('buildPackage')
            }
        }

        stage('install-package') {
            steps {
                gradleTask('installPackage')
            }
        }
        
        stage('test-package') {
            stages {
                stage('test-pfs-2.7.1') {
                    environment {
                        TEST_VERSION = '2.7.1'
                        K8S_TEST_NAMESPACE = stringScrub("pfsrsdk-2-7-1-test-${BRANCH_NAME.replace('.', '-').take(15)}-${BUILD_NUMBER}")
                        RELEASE_NAME = stringScrub("${RELEASE_NAME.take(32)}-2-7-1")
                    }

                    when {
                        expression { BRANCH_NAME ==~ /(develop|master|release.+)/ }
                    }

                    stages {
                        stage('install-pfs-env') {
                            steps {
                                createK8sNamespace()
                                helmInstall('pfs-legacy',
                                    [ chartVersion: TEST_VERSION,
                                      timeout: 1200,
                                      templateValues: [
                                        'namespace': K8S_TEST_NAMESPACE 
                                      ]
                                    ])
                                sleep 120
                            }
                        }

                        stage('execute-pfs-sdk-tests') {
                            options { retry(2) }

                            environment {
                                HOST = getK8sValue('pod', 'pfs-pod', '{{.status.hostIP}}')
                                PORT = getK8sValue('service', 'pfs-service', "\'{{range .spec.ports}}{{if eq .name \"http\"}}{{.nodePort}}{{end}}{{end}}\'")
                                TEST_ENV = "${TEST_VERSION}"
                            }
                            
                            steps {
                                script {
                                    try {
                                        gradleTask('testPackage')
                                    } catch (err) {
                                        echo err
                                    }
                                }
                            }
                        }
                    }

                    post {
                        always {
                            deleteK8sNamespace()
                        }
                    }
                }

                stage('test-pfs-2.8.1') {
                    environment {
                        TEST_VERSION = '2.8.1'
                        K8S_TEST_NAMESPACE = stringScrub("pfsrsdk-2-8-1-test-${BRANCH_NAME.replace('.', '-').take(15)}-${BUILD_NUMBER}")
                        RELEASE_NAME = stringScrub("${RELEASE_NAME.take(32)}-2-8-1")
                    }

                    stages {
                        stage('install-pfs-env') {
                            steps {
                                createK8sNamespace()
                                helmInstall('pfs-legacy',
                                    [ chartVersion: TEST_VERSION,
                                      timeout: 1200,
                                      templateValues: [
                                        'namespace': K8S_TEST_NAMESPACE 
                                      ]
                                    ])
                                sleep 120
                            }
                        }

                        stage('execute-pfs-sdk-tests') {
                            options { retry(2) }

                            environment {
                                HOST = getK8sValue('pod', 'pfs-pod', '{{.status.hostIP}}')
                                PORT = getK8sValue('service', 'pfs-service', "\'{{range .spec.ports}}{{if eq .name \"http\"}}{{.nodePort}}{{end}}{{end}}\'")
                                TEST_ENV = "${TEST_VERSION}"
                            }

                            steps {
                                script {
                                    try {
                                        gradleTask('testPackage')
                                    } catch (err) {
                                        echo err
                                    }
                                }
                            }
                        }
                    }

                    post {
                        always {
                            deleteK8sNamespace()
                        }
                    }
                }

                stage('test-pfs-3.0.3') {
                    environment {
                        TEST_VERSION = '3.0.3'
                        K8S_TEST_NAMESPACE = stringScrub("pfsrsdk-3-0-3-test-${BRANCH_NAME.replace('.', '-').take(15)}-${BUILD_NUMBER}")
                        RELEASE_NAME = stringScrub("${RELEASE_NAME.take(32)}-3-0-3")
                    }
                    
                    when {
                        expression { BRANCH_NAME ==~ /(develop|master|release.+)/ }
                    }

                    stages {
                        stage('install-pfs-env') {
                            steps {
                                createK8sNamespace()
                                helmInstall('pfs-legacy',
                                    [ chartVersion: TEST_VERSION,
                                      timeout: 1200,
                                      templateValues: [
                                        'namespace': K8S_TEST_NAMESPACE
                                      ]
                                    ])
                                sleep 120
                            }
                        }

                        stage('execute-pfs-sdk-tests') {
                            options { retry(2) }

                            environment {
                                HOST = getK8sValue('pod', 'pfs-pod', '{{.status.hostIP}}')
                                PORT = getK8sValue('service', 'pfs-service', "\'{{range .spec.ports}}{{if eq .name \"http\"}}{{.nodePort}}{{end}}{{end}}\'")
                                TEST_ENV = "${TEST_VERSION}"
                            }
                    
                            steps {
                                script {
                                    try {
                                        gradleTask('testPackage')
                                    } catch (err) {
                                        echo err
                                    }
                                }
                            }
                        }
                    }
                    
                    post {
                        always {
                            deleteK8sNamespace()
                        }
                    }
                }
                
                stage('test-pfs-3.0.4') {
                    environment {
                        TEST_VERSION = '3.0.4'
                        K8S_TEST_NAMESPACE = stringScrub("pfsrsdk-3-0-4-test-${BRANCH_NAME.replace('.', '-').take(15)}-${BUILD_NUMBER}")
                        RELEASE_NAME = stringScrub("${RELEASE_NAME.take(32)}-3-0-4")
                    }
                    
                    stages {
                        stage('install-pfs-env') {
                            steps {
                                createK8sNamespace()
                                helmInstall('pfs-legacy',
                                    [ chartVersion: TEST_VERSION,
                                      timeout: 1200,
                                      templateValues: [
                                        'namespace': K8S_TEST_NAMESPACE
                                      ]
                                    ])
                                sleep 120
                            }
                        }

                        stage('execute-pfs-sdk-tests') {
                            options { retry(2) }

                            environment {
                                HOST = getK8sValue('pod', 'pfs-pod', '{{.status.hostIP}}')
                                PORT = getK8sValue('service', 'pfs-service', "\'{{range .spec.ports}}{{if eq .name \"http\"}}{{.nodePort}}{{end}}{{end}}\'")
                                TEST_ENV = "${TEST_VERSION}"
                            }
                    
                            steps {
                                script {
                                    try {
                                        gradleTask('testPackage')
                                    } catch (err) {
                                        echo err
                                    }
                                }
                            }
                        }
                    }
                    
                    post {
                        always {
                            deleteK8sNamespace()
                        }
                    }
                }
            }
        }

        stage('build-docs') {
            steps {
                gradleTask('pkgdownSite')
            }
        }

        stage('artifactory-publish') {
            steps {
                gradleTask('artifactoryPublish')
            }
        }

        stage('docker-publish') {
            steps {
                gradleTask('publishImages', false, DOCKER_REGISTRY_GRADLE_PARAMS)
            }
        }
    }

    post {
        always {
            junit allowEmptyResults: true, testResults: 'build/tests/*.xml'
            sendNotification('#data-science-team')
            cleanWs deleteDirs: true, notFailBuild: true
        }
    }
}
