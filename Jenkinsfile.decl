@Library('common-jenkins-declarative@2.x.x') _

pipeline {
    agent {
        node { label 'agent-debian' }
    }

    environment {
        noOp = defaultEnv()
        RELEASE_BRANCHES = /^(master|develop|release.+|hotfix.+)/
    }

    options {
        timeout(time: 2, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
    }

    stages {
        stage('packrat') {
            steps {
                gradleTask('packratRestore')
            }
        }
        
        stage('build-package') {
            steps {
                gradleTask('buildPackage')
            }
        }

        stage('install-package') {
            steps {
                gradleTask('installPackage')
            }
        }
        
        stage('test-package') {
            stages {
                stage('test-pfs-2.7.1') {
                    environment {
                        TEST_VERSION = '2.7.1'
                        K8S_TEST_NAMESPACE = stringScrub("pfsrsdk-2-7-1-test-${BRANCH_NAME.replace('.', '-').take(15)}-${BUILD_NUMBER}")
                        RELEASE_NAME = stringScrub("${RELEASE_NAME.take(32)}-2-7-1")
                    }
                    
                    when {
                        expression { BRANCH_NAME ==~ RELEASE_BRANCHES }
                    }
                    
                    steps {
                        testGradleHelmPfs('pfs-legacy', 'testPackage', [chartVersion:TEST_VERSION, templateValues:['namespace': K8S_TEST_NAMESPACE]])
                    }
                }

                stage('test-pfs-2.8.1') {
                    environment {
                        TEST_VERSION = '2.8.1'
                        K8S_TEST_NAMESPACE = stringScrub("pfsrsdk-2-8-1-test-${BRANCH_NAME.replace('.', '-').take(15)}-${BUILD_NUMBER}")
                        RELEASE_NAME = stringScrub("${RELEASE_NAME.take(32)}-2-8-1")
                    }

                    steps {
                        testGradleHelmPfs('pfs-legacy', 'testPackage', [chartVersion:TEST_VERSION, templateValues:['namespace': K8S_TEST_NAMESPACE]])
                    }
                }

                stage('test-pfs-3.0.3') {
                    environment {
                        TEST_VERSION = '3.0.3'
                        K8S_TEST_NAMESPACE = stringScrub("pfsrsdk-3-0-3-test-${BRANCH_NAME.replace('.', '-').take(15)}-${BUILD_NUMBER}")
                        RELEASE_NAME = stringScrub("${RELEASE_NAME.take(32)}-3-0-3")
                    }
                    
                    when {
                        expression { BRANCH_NAME ==~ RELEASE_BRANCHES }
                    }

                    steps {
                        testGradleHelmPfs('pfs-legacy', 'testPackage', [chartVersion:TEST_VERSION, templateValues:['namespace': K8S_TEST_NAMESPACE]])
                    }
                }
                
                stage('test-pfs-3.0.4') {
                    environment {
                        TEST_VERSION = '3.0.4'
                        K8S_TEST_NAMESPACE = stringScrub("pfsrsdk-3-0-4-test-${BRANCH_NAME.replace('.', '-').take(15)}-${BUILD_NUMBER}")
                        RELEASE_NAME = stringScrub("${RELEASE_NAME.take(32)}-3-0-4")
                    }
                    
                    steps {
                        testGradleHelmPfs('pfs-legacy', 'testPackage', [chartVersion:TEST_VERSION, templateValues:['namespace': K8S_TEST_NAMESPACE]])
                    }
                }
            }
        }

        stage('build-docs') {
            steps {
                gradleTask('pkgdownSite')
            }
        }

        stage('artifactory-publish') {
            steps {
                gradleTask('artifactoryPublish')
            }
        }

        stage('docker-publish') {
            steps {
                gradleTask('publishImages', false, DOCKER_REGISTRY_GRADLE_PARAMS)
            }
        }
    }

    post {
        always {
            junit allowEmptyResults: true, testResults: 'build/tests/*.xml'
            archiveArtifacts artifacts: 'build/distributions/*.zip', allowEmptyArchive: true, onlyIfSuccessful: true
            sendNotification(DATA_SCIENCE)
            cleanWs deleteDirs: true, notFailBuild: true
        }
    }
}
