buildscript {
    apply from: "$rootProject.projectDir/gradle/buildscript.gradle", to: buildscript
}

import com.coreinformatics.GitUtil
import com.coreinformatics.common.property.PropertyUtil

apply plugin: 'com.coreinformatics.docker-plugin'

String getGitBranchName() {
    return project.hasProperty('branchName') ? branchName : grgit.branch.getCurrent().getName()
}

ext {
    branchName = getGitBranchName().toLowerCase().replace('/', '-').replace('_', '-')
}

docker {
    url = (project.hasProperty('dockerRestUrl') ? project.property('dockerRestUrl') : PropertyUtil.getPropertyOrEnvironmentValue('dockerRestUrl', 'DOCKER_HOST', ''))
    certPath = new File(project.hasProperty('dockerCertPath') ? project.property('dockerCertPath') : PropertyUtil.getPropertyOrEnvironmentValue('dockerCertPath', 'DOCKER_CERT_PATH', ''))
    logger.info 'docker.url: ' + url
    logger.info 'docker.certPath: ' + certPath

    registryCredentials {
        url = dockerRepository
        username = project.hasProperty('dockerRepositoryUsername') ? project.property('dockerRepositoryUsername') : null
        password = project.hasProperty('dockerRepositoryPassword') ? project.property('dockerRepositoryPassword') : null
        email = project.hasProperty('dockerRepositoryEmail') ? project.property('dockerRepositoryEmail') : null
    }
}

images {
    pfsRSdkDocs {
        containerDirectory = 'docs'
        dstImageName = dockerDocsImageName
        isPushable = true
        branchName = project.ext.branchName.toLowerCase().replace('/', '-').replace('_', '-')
        fromImage = "${dockerDocsSrcImage}"
    }
    pfsRSdkShiny {
        containerDirectory = 'shiny'
        dstImageName = dockerShinyImageName
        isPushable = true
        branchName = project.ext.branchName.toLowerCase().replace('/', '-').replace('_', '-')
        fromImage = "${dockerShinySrcImage}"
    }
}

task copyPackage(type: Copy, group: 'docker') {
    from buildPackage.outputs
    into 'build/shiny'
    include "${project.ext.packageName}_${project.ext.packageVersion}.tar.gz"
}

task copyShinyApp(type: Copy, group: 'docker') {
    from 'inst/shiny'
    into 'build/shiny'
}

createPfsRSdkDocsConfigfile {
    dependsOn 'pkgdownSite'
    
    destFile = project.file('build/docs/Dockerfile')
   
    def labels = [:]
    labels.put('maintainer', projectVendor)
    labels.put('description', projectDescription)
    label labels
    
    addFile '.', '/usr/share/nginx/html/'
}

createPfsRSdkShinyConfigfile {
    dependsOn 'copyPackage'
    dependsOn 'copyShinyApp'
    
    destFile = project.file('build/shiny/Dockerfile')
    
    def labels = [:]
    labels.put('maintainer', projectVendor)
    labels.put('description', projectDescription)
    label labels
    
    runCommand 'mkdir -p /R/app'
    addFile '.', '/R/app'
    
    workingDir '/R/app'
    runCommand "R CMD INSTALL ${project.ext.packageName}_${project.ext.packageVersion}.tar.gz"
    
    runCommand 'Rscript -e \"install.packages(\'shiny\')\"'
    
    exposePort 3838
    
    entryPoint 'R', '-e', 'shiny::runApp(appDir=\'/R/app\',port=3838,host=\'0.0.0.0\')'
}
