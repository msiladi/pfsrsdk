buildscript {
    apply from: "$rootProject.projectDir/gradle/buildscript.gradle", to: buildscript
}

apply plugin: 'com.umayrh.rplugin'
import com.umayrh.gradle.RScriptTask
import org.gradle.api.tasks.Input
import org.yaml.snakeyaml.Yaml

class DescriptionYaml {
    private final File descriptionFile
    private Yaml parser = new Yaml()
    private Map<String, Object> descriptionYaml
    private String packageVersion
    private String packageName
    
    DescriptionYaml(File descriptionFile) {
        this.descriptionYaml = parser.load(descriptionFile.text)
        this.packageVersion = this.readDescriptionValue('Version')
        this.packageName = this.readDescriptionValue('Package')
    }
    
    private String readDescriptionValue(String key) {
        return descriptionYaml.get(key)
    }
    
    public String getVersion() {
        return packageVersion
    }
    
    public String getPackageName() {
        return packageName
    }
}

DescriptionYaml description = new DescriptionYaml(file("${project.projectDir}/DESCRIPTION"))

project.ext {
    docsDir = "${project.buildDir}/docs"
    packageVersion = description.getVersion()
    packageName = description.getPackageName()
    packageFileDir = "${project.buildDir}/package"
    packageFileName = "${project.ext.packageName}_${project.ext.packageVersion}.tar.gz"
    packageTestDir = "${project.buildDir}/tests"
    packageTestFileName = "${project.ext.packageName}-${project.ext.packageVersion}"
    packageDocsName = "${project.ext.packageName}-${project.ext.packageVersion}-docs"
}

class RScriptBuildPackageTask extends com.umayrh.gradle.RScriptTask {
    File buildFile = project.file("${project.ext.packageFileDir}/${project.ext.packageFileName}")
    
    @Input
    String description = "Build the package, via devtools"
    String expression = "devtools::build(path = '${project.ext.packageFileDir}')"
    
    @OutputFile
    File getBuildFile() { return this.buildFile; }
}

class RScriptInstallPackageTask extends com.umayrh.gradle.RScriptTask {
    File buildFile = project.file("${project.ext.packageFileDir}/${project.ext.packageFileName}")
    
    @Input
    String description = "Install the package to local, via devtools"
    String expression = "devtools::install(pkg = '${project.ext.packageFileDir}', build = FALSE, upgrade = FALSE)"
    
    @InputFile
    File getBuildFile() { return this.buildFile; }
}

class RScriptTestPackageTask extends com.umayrh.gradle.RScriptTask {
    File testReportDir = project.file("${project.ext.packageTestDir}")
    String testEnvVersion = System.getenv('TEST_ENV') ?: '2.7.1'
    File testReportXmlFile = project.file("${project.ext.packageTestDir}/${project.ext.packageTestFileName}-${testEnvVersion}.xml")
    File testReportRdsFile = project.file("${project.ext.packageTestDir}/${project.ext.packageTestFileName}-${testEnvVersion}.Rds")
    
    @Input
    String description = "Test the package, via testthat"
    String expression = "saveRDS(withr::with_options(list(testthat.output_file = \"${testReportXmlFile}\"), {devtools::test(reporter = JunitReporter)}), \"${testReportRdsFile}\")"
    
    @OutputFile
    File getTestXmlFile() { return this.testReportXmlFile; }
}

class RScriptPkgdownSiteTask extends com.umayrh.gradle.RScriptTask {
    File docsDir = project.file("${project.ext.docsDir}")
    
    @Input
    String description = "Build the static documentation website, via pkgdown"
    String expression = "pkgdown::build_site(override = list(destination = '${project.ext.docsDir}'))"
    
    @OutputDirectory
    File getDocsDir() { return this.docsDir; }
}

task buildPackage(type: RScriptBuildPackageTask, group: "R packaging")

task installPackage(type: RScriptInstallPackageTask, group: "R packaging") {
    dependsOn 'buildPackage'
    outputs.upToDateWhen { return true; }
}

task testPackage(type: RScriptTestPackageTask, group: "R packaging")

task pkgdownSite(type: RScriptPkgdownSiteTask, group: "R packaging")

installDeps.enabled = false

